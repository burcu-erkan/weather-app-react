{"ast":null,"code":"var _jsxFileName = \"/Users/burcu/weather-app-react/src/components/AsideRight.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport LocalTime from \"./LocalTime\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"d9f74750265ef9dc89f33cdb37eb1887\";\n\nfunction AsideRight() {\n  _s();\n\n  const [currLocData, setCurrLocData] = useState({\n    city: \"\",\n    state: \"\",\n    country: \"\"\n  });\n  const [currLocWeatherCond, setCurrLocWeatherCond] = useState({\n    weather: [{\n      id: \"\",\n      description: \"\"\n    }],\n    main: {\n      temp: \"\",\n      temp_min: \"\",\n      temp_max: \"\"\n    }\n  });\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n\n  const savePositionToState = position => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  };\n\n  const fetchWeather = async () => {\n    try {\n      await window.navigator.geolocation.getCurrentPosition(savePositionToState);\n      const res = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_key}&units=metric`);\n      setCurrLocWeatherCond({\n        weather: res.weather,\n        main: res.main\n      });\n      setCurrLocData({\n        city: res.data.city,\n        state: res.data.region,\n        country: res.data.countryCode\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchWeather();\n  }, [latitude, longitude]); //useEffect(() => {\n  //   const currLocationAPI = \"http://extreme-ip-lookup.com/json/\";\n  //   axios\n  //     .get(currLocationAPI)\n  //     .then(async (currLocationRes) => {\n  //       const currWeatherApi = `https://api.openweathermap.org/data/2.5/weather?lat=${currLocationRes.data.lat}&lon=${currLocationRes.data.lon}&appid=d9f74750265ef9dc89f33cdb37eb1887`;\n  //       const res = await fetch(currWeatherApi);\n  //       const result = await res.json();\n  //      console.log(result,\"result\");\n  //      console.log(currLocationRes)\n  //       setCurrLocWeatherCond({\n  //         weather: result.weather,\n  //         main: result.main,\n  //       });\n  //       setCurrLocData({\n  //         city: currLocationRes.data.city,\n  //         state: currLocationRes.data.region,\n  //         country: currLocationRes.data.countryCode,\n  //       });\n  //     })\n  // }, []);\n  // const convertKtoF = (temp) => {\n  //   return Math.floor(((temp - 273.15) * 9) / 5 + 32);\n  // };\n  // const minMaxTemp = (min, max) => {\n  //   return (\n  //     <h6>\n  //       <span>Low: {convertKtoF(min)}&deg;</span>\n  //       {\" - \"}\n  //       <span>High: {convertKtoF(max)}&deg;</span>\n  //     </h6>\n  //   );\n  // };\n  //const { temp_min, temp_max, temp } = currLocWeatherCond.main;\n\n  const {\n    city,\n    state,\n    country\n  } = currLocData; //const { description, id } = currLocWeatherCond.weather[0];\n\n  const customCl = `wi wi-owm-${id} display-1`;\n  return /*#__PURE__*/_jsxDEV(\"aside\", {\n    id: \"right-side\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"aside-h3\",\n      children: \"Local Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-location\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), \", \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: country\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      className: customCl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LocalTime, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AsideRight, \"R1lcAYB8xyxRtlwNikE1u+pg0o0=\");\n\n_c = AsideRight;\nexport default AsideRight;\n\nvar _c;\n\n$RefreshReg$(_c, \"AsideRight\");","map":{"version":3,"sources":["/Users/burcu/weather-app-react/src/components/AsideRight.js"],"names":["React","useState","useEffect","LocalTime","axios","API_key","AsideRight","currLocData","setCurrLocData","city","state","country","currLocWeatherCond","setCurrLocWeatherCond","weather","id","description","main","temp","temp_min","temp_max","latitude","setLatitude","longitude","setLongitude","savePositionToState","position","coords","fetchWeather","window","navigator","geolocation","getCurrentPosition","res","get","data","region","countryCode","err","console","error","customCl"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport LocalTime from \"./LocalTime\";\nimport axios from \"axios\";\n\nconst API_key = \"d9f74750265ef9dc89f33cdb37eb1887\"\nfunction AsideRight() {\n  const [currLocData, setCurrLocData] = useState({\n    city: \"\",\n    state: \"\",\n    country: \"\",\n  });\n\n  const [currLocWeatherCond, setCurrLocWeatherCond] = useState({\n    weather: [{ id: \"\", description: \"\" }],\n    main: { temp: \"\", temp_min: \"\", temp_max: \"\" },\n  });\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n\n  const savePositionToState = (position) => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  };\n\n  const fetchWeather = async () => {\n    try {\n      await window.navigator.geolocation.getCurrentPosition(\n        savePositionToState\n      );\n      const res = await axios.get(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_key}&units=metric`\n      );\n      setCurrLocWeatherCond({\n                weather: res.weather,\n                main: res.main,\n              });\n              setCurrLocData({\n                city: res.data.city,\n                state: res.data.region,\n                country: res.data.countryCode,\n              });\n      }catch (err) {\n        console.error(err);\n      }\n\n\n    }\n    useEffect(() => {\n      fetchWeather();\n    }, [latitude, longitude]);\n\n   //useEffect(() => {\n  //   const currLocationAPI = \"http://extreme-ip-lookup.com/json/\";\n  //   axios\n  //     .get(currLocationAPI)\n  \n  //     .then(async (currLocationRes) => {\n  //       const currWeatherApi = `https://api.openweathermap.org/data/2.5/weather?lat=${currLocationRes.data.lat}&lon=${currLocationRes.data.lon}&appid=d9f74750265ef9dc89f33cdb37eb1887`;\n  //       const res = await fetch(currWeatherApi);\n  //       const result = await res.json();\n  //      console.log(result,\"result\");\n\n  //      console.log(currLocationRes)\n  //       setCurrLocWeatherCond({\n  //         weather: result.weather,\n  //         main: result.main,\n  //       });\n  //       setCurrLocData({\n  //         city: currLocationRes.data.city,\n  //         state: currLocationRes.data.region,\n  //         country: currLocationRes.data.countryCode,\n  //       });\n  //     })\n\n  // }, []);\n  // const convertKtoF = (temp) => {\n  //   return Math.floor(((temp - 273.15) * 9) / 5 + 32);\n  // };\n\n  // const minMaxTemp = (min, max) => {\n  //   return (\n  //     <h6>\n  //       <span>Low: {convertKtoF(min)}&deg;</span>\n  //       {\" - \"}\n  //       <span>High: {convertKtoF(max)}&deg;</span>\n  //     </h6>\n  //   );\n  // };\n\n  //const { temp_min, temp_max, temp } = currLocWeatherCond.main;\n  const { city, state, country } = currLocData;\n  //const { description, id } = currLocWeatherCond.weather[0];\n  const customCl = `wi wi-owm-${id} display-1`;\n  return (\n    <aside id=\"right-side\">\n      <h3 className=\"aside-h3\">Local Weather</h3>\n      <div className=\"current-location\">\n        <span>{city}</span>\n        <br />\n        <span>{state}</span>\n        {\", \"}\n        <span>{country}</span>\n      </div>\n      <i className={customCl}></i>\n      {/* <h1>{convertKtoF(temp)}&deg;</h1>\n      {minMaxTemp(temp_min, temp_max)} */}\n      {/* <h4>{description}</h4>  */}\n      <LocalTime />\n    </aside>\n  );\n}\n\nexport default AsideRight;"]},"metadata":{},"sourceType":"module"}